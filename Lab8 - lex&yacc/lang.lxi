%option noyywrap

%{ 	 
#include <math.h> 
%} 

DIGIT 		[0-9]
WORD		\"[a-zA-Z0-9]*\"
INTEGER		[+-]?[1-9][0-9]*
CHARACTER 	\'[a-zA-Z0-9]\'
constant	{WORD}|{INTEGER}|{CHARACTER}
identifier	[a-zA-Z][a-zA-Z0-9]* 

%% 

in           printf( "Reserved word: %s\n", yytext);
out          printf( "Reserved word: %s\n", yytext);
begin        printf( "Reserved word: %s\n", yytext);
number       printf( "Reserved word: %s\n", yytext);
string       printf( "Reserved word: %s\n", yytext);
character    printf( "Reserved word: %s\n", yytext);
if    		 printf( "Reserved word: %s\n", yytext);
end       	 printf( "Reserved word: %s\n", yytext);
end_if       printf( "Reserved word: %s\n", yytext);
end_for      printf( "Reserved word: %s\n", yytext);
while      	 printf( "Reserved word: %s\n", yytext);
end_while    printf( "Reserved word: %s\n", yytext);
else         printf( "Reserved word: %s\n", yytext);

","	    	 printf( "Separator: %s\n", yytext );
";"	    	 printf( "Separator: %s\n", yytext );
":"	    	 printf( "Separator: %s\n", yytext );
"("	    	 printf( "Separator: %s\n", yytext );
")"	    	 printf( "Separator: %s\n", yytext );
"["	    	 printf( "Separator: %s\n", yytext );
"]"	    	 printf( "Separator: %s\n", yytext );

"<-"		 printf( "Assignment Operator: %s\n", yytext );
"+"	    	 printf( "Operator: %s\n", yytext );
"-"	    	 printf( "Operator: %s\n", yytext );
"*"	    	 printf( "Operator: %s\n", yytext );
"/"	    	 printf( "Operator: %s\n", yytext );
"mod"		 printf( "Operator: %s\n", yytext );
"="	    	 printf( "Operator: %s\n", yytext );
"<"	    	 printf( "Operator: %s\n", yytext );
"<="		 printf( "Operator: %s\n", yytext );
">"	    	 printf( "Operator: %s\n", yytext );
">="		 printf( "Operator: %s\n", yytext );
"<>"		 printf( "Operator: %s\n", yytext );
"and"		 printf( "Operator: %s\n", yytext );
"or"		 printf( "Operator: %s\n", yytext );
"not"		 printf( "Operator: %s\n", yytext );

{identifier}	printf( "Identifier: %s\n", yytext);
{constant}	    printf( "Constant: %s\n", yytext );

[ \t]+ 
[\n]+ 
		 
[+-]?0[0-9]*                    printf("Illegal integer at line\n");
[0-9]+[a-zA-Z_]+[a-zA-Z0-9_]*   printf("Illegal identifier\n");
\'[a-zA-Z0-9]{2,}\'             printf("Character of length >=2 at line\n");
.                               printf("Lexical error\n");

%% 
main( argc, argv ) 
int argc; 
char **argv; 
{ 
    ++argv, --argc; /* skip over program name */ 
    if ( argc > 0 ) 
    yyin = fopen( argv[0], "r" ); 
    else 
     yyin = stdin; 
    yylex(); 
} 
